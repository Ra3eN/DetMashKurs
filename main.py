# main.py
import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

# –¢–æ–∫–µ–Ω –∏–∑ @BotFather
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ JSON
DATA_FILE = "user_data.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

STEPS = [
    "start", "drive_type", "input_data",
    "motor_selection", "kinematic_calc", "gear_calc",
    "shaft_calc", "bearing_calc", "assembly",
    "report", "drawings", "complete"
]

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {"step": "start", "info": {}}
        save_data(data)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—É—Ä—Å–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –ø–æ *–¥–µ—Ç–∞–ª—è–º –º–∞—à–∏–Ω*.\n"
            "–ù–∞–∂–º–∏ /begin, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            parse_mode="Markdown"
        )
    else:
        step = data[user_id]["step"]
        await resume(message, step)

async def resume(message: types.Message, step: str):
    titles = {
        "drive_type": "–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–≤–æ–¥–∞",
        "input_data": "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö",
        "motor_selection": "–ü–æ–¥–±–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        # ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    }
    current = titles.get(step, step)
    await message.answer(
        f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞: *{current}*\n"
        "–ù–∞–∂–º–∏ /begin, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        parse_mode="Markdown"
    )

@dp.message(Command("begin"))
async def begin(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    step = data.get(user_id, {}).get("step", "start")

    descriptions = {
        "drive_type": "üè≠ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞: –ª–µ–Ω—Ç–æ—á–Ω—ã–π –∏–ª–∏ —Ü–µ–ø–Ω–æ–π",
        "input_data": "üìä –í–≤–µ–¥–∏: P = ... –∫–í—Ç, n = ... –æ–±/–º–∏–Ω",
        "motor_selection": "üîå –ü–æ–¥–±–∏—Ä–∞–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å...",
        "complete": "üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!"
    }

    text = descriptions.get(step, "–®–∞–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    data[user_id]["step"] = STEPS[(STEPS.index(step) + 1) % len(STEPS)]
    save_data(data)
    await message.answer(text)

# –ó–∞–ø—É—Å–∫
async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    bot_info = await bot.get_me()
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
    await dp.start_polling(bot)

if __name__ == '__main__':

    asyncio.run(main())
